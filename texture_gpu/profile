UNA SINGOLA SIMULAZIONE SOLIDO , 108 PARTICELLE, 10'000 STEP

TEMPO TOTALE ESECUZIONE : 1179.2 ms

NUMERO DI BLOCCHI 32 , NUMERO DI THREADS PER BLOCCO 256

############################################## NVPROF #################################

==1683== Profiling application: ./MolDyn_NVE.x 0
==1683== Profiling result:
Time(%)      Time     Calls       Avg       Min       Max  Name
 87.14%  742.37ms     10000  74.236us  71.194us  75.395us  verlet_gpu(float*, float*, float*, float*, float*, float*, float*, float*, float*)
  7.72%  65.782ms      1001  65.716us  61.768us  69.858us  measure_pot_virial(Lock, float*, float*, float*)
  3.20%  27.232ms      1001  27.204us  25.095us  29.122us  measure_kinetic(Lock, float*)
  1.32%  11.233ms      4010  2.8010us  2.7200us  23.873us  [CUDA memcpy DtoH]
  0.62%  5.2598ms      2002  2.6270us  1.4400us  23.809us  [CUDA memset]
  0.00%  23.552us        14  1.6820us  1.6320us  1.7920us  [CUDA memcpy HtoD]

==1683== API calls:
Time(%)      Time     Calls       Avg       Min       Max  Name
 35.90%  421.35ms     12002  35.106us  31.611us  591.32us  cudaLaunch
 32.20%  378.01ms      3016  125.33us  1.8380us  428.16us  cudaFree
 13.49%  158.39ms      4019  39.409us  12.002us  249.01us  cudaMemcpy
 13.04%  153.09ms      1014  150.98us  11.976us  137.03ms  cudaMalloc
  2.41%  28.338ms     96006     295ns     233ns  569.28us  cudaSetupArgument
  2.11%  24.773ms      2002  12.374us  9.7060us  34.188us  cudaMemset
  0.46%  5.3664ms     12002     447ns     358ns  13.957us  cudaConfigureCall
  0.29%  3.4303ms       364  9.4240us     268ns  397.02us  cuDeviceGetAttribute
  0.03%  404.49us         4  101.12us  76.858us  167.36us  cuDeviceTotalMem
  0.03%  369.99us         4  92.498us  83.492us  98.577us  cuDeviceGetName
  0.01%  70.895us         5  14.179us  12.067us  21.482us  cudaMemcpyToSymbol
  0.01%  65.871us         9  7.3190us  3.5120us  31.791us  cudaBindTexture
  0.00%  36.585us         9  4.0650us  1.4550us  14.967us  cudaUnbindTexture
  0.00%  33.516us         2  16.758us  10.120us  23.396us  cudaEventRecord
  0.00%  12.200us         2  6.1000us  1.8930us  10.307us  cudaEventCreate
  0.00%  7.0340us        12     586ns     268ns  2.6810us  cuDeviceGet
  0.00%  6.5700us         1  6.5700us  6.5700us  6.5700us  cudaEventSynchronize
  0.00%  4.6280us         3  1.5420us     420ns  2.9650us  cuDeviceGetCount
  0.00%  3.8250us         1  3.8250us  3.8250us  3.8250us  cudaEventElapsedTime


##################################### GPROF ############################################


Flat profile:

Each sample counts as 0.01 seconds.
 no time accumulated

  %   cumulative   self              self     total           
 time   seconds   seconds    calls  Ts/call  Ts/call  name    
  0.00      0.00     0.00     2804     0.00     0.00  void std::vector<float, std::allocator<float> >::_M_emplace_back_aux<float>(float&&)
  0.00      0.00     0.00      101     0.00     0.00  last_data_from_datablocking(int, std::vector<float, std::allocator<float> >)
  0.00      0.00     0.00       55     0.00     0.00  void std::vector<float, std::allocator<float> >::_M_emplace_back_aux<float const&>(float const&)
  0.00      0.00     0.00       10     0.00     0.00  std::string __gnu_cxx::__to_xstring<std::string, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) [clone .constprop.85]
  0.00      0.00     0.00        5     0.00     0.00  data_blocking(int, std::vector<float, std::allocator<float> >, float, std::string)
  0.00      0.00     0.00        5     0.00     0.00  void Print<float>(std::vector<float, std::allocator<float> >, std::string)
  0.00      0.00     0.00        1     0.00     0.00  _GLOBAL__sub_I_n_props
  0.00      0.00     0.00        1     0.00     0.00  __sti____cudaRegisterAll_45_tmpxft_00000654_00000000_9_MolDyn_NVE_cpp1_ii_gdir()

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.


Copyright (C) 2012-2016 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.


		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) no time propagated

index % time    self  children    called     name
                0.00    0.00       8/2804        data_blocking_MD(int) [21]
                0.00    0.00      80/2804        data_blocking(int, std::vector<float, std::allocator<float> >, float, std::string) [12]
                0.00    0.00    1100/2804        Measure(Particles*) [35]
                0.00    0.00    1616/2804        last_data_from_datablocking(int, std::vector<float, std::allocator<float> >) [9]
[8]      0.0    0.00    0.00    2804         void std::vector<float, std::allocator<float> >::_M_emplace_back_aux<float>(float&&) [8]
-----------------------------------------------
                0.00    0.00     101/101         data_blocking_MD(int) [21]
[9]      0.0    0.00    0.00     101         last_data_from_datablocking(int, std::vector<float, std::allocator<float> >) [9]
                0.00    0.00    1616/2804        void std::vector<float, std::allocator<float> >::_M_emplace_back_aux<float>(float&&) [8]
-----------------------------------------------
                0.00    0.00      55/55          Measure(Particles*) [35]
[10]     0.0    0.00    0.00      55         void std::vector<float, std::allocator<float> >::_M_emplace_back_aux<float const&>(float const&) [10]
-----------------------------------------------
                0.00    0.00       5/10          print_properties() [22]
                0.00    0.00       5/10          data_blocking_MD(int) [21]
[11]     0.0    0.00    0.00      10         std::string __gnu_cxx::__to_xstring<std::string, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) [clone .constprop.85] [11]
-----------------------------------------------
                0.00    0.00       5/5           data_blocking_MD(int) [21]
[12]     0.0    0.00    0.00       5         data_blocking(int, std::vector<float, std::allocator<float> >, float, std::string) [12]
                0.00    0.00      80/2804        void std::vector<float, std::allocator<float> >::_M_emplace_back_aux<float>(float&&) [8]
-----------------------------------------------
                0.00    0.00       5/5           print_properties() [22]
[13]     0.0    0.00    0.00       5         void Print<float>(std::vector<float, std::allocator<float> >, std::string) [13]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [50]
[14]     0.0    0.00    0.00       1         _GLOBAL__sub_I_n_props [14]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [50]
[15]     0.0    0.00    0.00       1         __sti____cudaRegisterAll_45_tmpxft_00000654_00000000_9_MolDyn_NVE_cpp1_ii_gdir() [15]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

