UNA SINGOLA SIMULAZIONE SOLIDO , 108 PARTICELLE, 10'000 STEP

TEMPO TOTALE ESECUZIONE :  2027.2 ms

NUMERO DI BLOCCHI 32 , NUMERO DI THREADS PER BLOCCO 256

######################################## NVPROF ################################

==13992== Profiling application: ./MolDyn_NVE.x 0
==13992== Profiling result:
Time(%)      Time     Calls       Avg       Min       Max  Name
 93.06%  1.61855s     10000  161.85us  133.15us  225.21us  verlet_gpu(float*, float*, float*, float*, float*, float*, float*, float*, float*)
  4.55%  79.198ms      1001  79.118us  75.606us  101.26us  measure_pot_virial(Lock, float*, float*, float*, float*, float*, float*)
  1.54%  26.754ms      1001  26.726us  24.741us  28.656us  measure_kinetic(Lock, float*, float*, float*, float*)
  0.64%  11.052ms      4004  2.7600us  2.7200us  12.512us  [CUDA memcpy DtoH]
  0.21%  3.6578ms      2002  1.8270us  1.7920us  3.4880us  [CUDA memset]
  0.00%  77.356us         6  12.892us  7.7850us  28.288us  [CUDA memcpy HtoH]
  0.00%  9.3130us         5  1.8620us  1.8240us  2.0160us  [CUDA memcpy HtoD]

==13992== API calls:
Time(%)      Time     Calls       Avg       Min       Max  Name
 71.33%  1.50694s      3007  501.14us  1.8120us  1.6764ms  cudaFree
 10.96%  231.50ms         9  25.722ms  13.086us  231.36ms  cudaHostAlloc
  7.83%  165.53ms      4010  41.278us  12.984us  117.87us  cudaMemcpy
  5.86%  123.84ms     12002  10.318us  8.6160us  559.38us  cudaLaunch
  1.39%  29.439ms    102012     288ns     233ns  562.58us  cudaSetupArgument
  1.21%  25.491ms      2002  12.732us  10.036us  50.482us  cudaMemset
  0.69%  14.680ms      1005  14.607us  10.173us  232.38us  cudaMalloc
  0.26%  5.5374ms         9  615.26us  13.799us  5.0691ms  cudaFreeHost
  0.25%  5.3674ms     12002     447ns     357ns  12.001us  cudaConfigureCall
  0.16%  3.4033ms       364  9.3490us     268ns  384.58us  cuDeviceGetAttribute
  0.02%  414.36us         4  103.59us  75.442us  161.56us  cuDeviceTotalMem
  0.02%  336.68us         4  84.170us  78.407us  91.480us  cuDeviceGetName
  0.01%  136.11us         5  27.221us  12.046us  70.782us  cudaMemcpyToSymbol
  0.00%  46.197us         2  23.098us  8.4870us  37.710us  cudaEventRecord
  0.00%  23.051us         1  23.051us  23.051us  23.051us  cudaSetDevice
  0.00%  21.392us         9  2.3760us  1.0030us  12.653us  cudaHostGetDevicePointer
  0.00%  17.497us         1  17.497us  17.497us  17.497us  cudaEventElapsedTime
  0.00%  11.802us         2  5.9010us  1.5230us  10.279us  cudaEventCreate
  0.00%  6.5820us         1  6.5820us  6.5820us  6.5820us  cudaEventSynchronize
  0.00%  6.4990us        12     541ns     263ns  2.4490us  cuDeviceGet
  0.00%  3.6390us         3  1.2130us     488ns  2.4960us  cuDeviceGetCount



################################### GPROF ###################################################

Flat profile:

Each sample counts as 0.01 seconds.
 no time accumulated

  %   cumulative   self              self     total           
 time   seconds   seconds    calls  Ts/call  Ts/call  name    
  0.00      0.00     0.00     2804     0.00     0.00  void std::vector<float, std::allocator<float> >::_M_emplace_back_aux<float>(float&&)
  0.00      0.00     0.00     1001     0.00     0.00  __device_stub__Z18measure_pot_virial4LockPfS0_S0_S0_S0_S0_(Lock&, float*, float*, float*, float*, float*, float*)
  0.00      0.00     0.00      101     0.00     0.00  last_data_from_datablocking(int, std::vector<float, std::allocator<float> >)
  0.00      0.00     0.00       55     0.00     0.00  void std::vector<float, std::allocator<float> >::_M_emplace_back_aux<float const&>(float const&)
  0.00      0.00     0.00       10     0.00     0.00  std::string __gnu_cxx::__to_xstring<std::string, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) [clone .constprop.85]
  0.00      0.00     0.00        5     0.00     0.00  data_blocking(int, std::vector<float, std::allocator<float> >, float, std::string)
  0.00      0.00     0.00        5     0.00     0.00  void Print<float>(std::vector<float, std::allocator<float> >, std::string)
  0.00      0.00     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z16big_random_blocki
  0.00      0.00     0.00        1     0.00     0.00  __sti____cudaRegisterAll_45_tmpxft_00003659_00000000_9_MolDyn_NVE_cpp1_ii_68d40520()

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.


Copyright (C) 2012-2016 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.


		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) no time propagated

index % time    self  children    called     name
                0.00    0.00       8/2804        data_blocking_MD(int) [28]
                0.00    0.00      80/2804        data_blocking(int, std::vector<float, std::allocator<float> >, float, std::string) [13]
                0.00    0.00    1100/2804        Measure(Particles*) [46]
                0.00    0.00    1616/2804        last_data_from_datablocking(int, std::vector<float, std::allocator<float> >) [10]
[8]      0.0    0.00    0.00    2804         void std::vector<float, std::allocator<float> >::_M_emplace_back_aux<float>(float&&) [8]
-----------------------------------------------
                0.00    0.00    1001/1001        Measure(Particles*) [46]
[9]      0.0    0.00    0.00    1001         __device_stub__Z18measure_pot_virial4LockPfS0_S0_S0_S0_S0_(Lock&, float*, float*, float*, float*, float*, float*) [9]
-----------------------------------------------
                0.00    0.00     101/101         data_blocking_MD(int) [28]
[10]     0.0    0.00    0.00     101         last_data_from_datablocking(int, std::vector<float, std::allocator<float> >) [10]
                0.00    0.00    1616/2804        void std::vector<float, std::allocator<float> >::_M_emplace_back_aux<float>(float&&) [8]
-----------------------------------------------
                0.00    0.00      55/55          Measure(Particles*) [46]
[11]     0.0    0.00    0.00      55         void std::vector<float, std::allocator<float> >::_M_emplace_back_aux<float const&>(float const&) [11]
-----------------------------------------------
                0.00    0.00       5/10          print_properties() [29]
                0.00    0.00       5/10          data_blocking_MD(int) [28]
[12]     0.0    0.00    0.00      10         std::string __gnu_cxx::__to_xstring<std::string, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) [clone .constprop.85] [12]
-----------------------------------------------
                0.00    0.00       5/5           data_blocking_MD(int) [28]
[13]     0.0    0.00    0.00       5         data_blocking(int, std::vector<float, std::allocator<float> >, float, std::string) [13]
                0.00    0.00      80/2804        void std::vector<float, std::allocator<float> >::_M_emplace_back_aux<float>(float&&) [8]
-----------------------------------------------
                0.00    0.00       5/5           print_properties() [29]
[14]     0.0    0.00    0.00       5         void Print<float>(std::vector<float, std::allocator<float> >, std::string) [14]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [60]
[15]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z16big_random_blocki [15]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [60]
[16]     0.0    0.00    0.00       1         __sti____cudaRegisterAll_45_tmpxft_00003659_00000000_9_MolDyn_NVE_cpp1_ii_68d40520() [16]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

